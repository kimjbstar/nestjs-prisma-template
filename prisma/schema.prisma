generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "darwin"]
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator prismaClassGenerator {
  provider   = "prisma-class-generator"
  dryRun     = "false"
  useGraphQL = "true"
  useSwagger = "false"
}

enum UserRole {
  NORMAL
  COMPANY
  ADMIN
  SUPER_ADMIN
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @db.VarChar(128)
  name          String    @db.VarChar(128)
  password      String    @db.VarChar(256)
  salt          String    @db.VarChar(256)
  role          UserRole
  addressRoad   String?   @db.VarChar(256)
  addressDetail String?   @db.VarChar(256)
  age           Int?
  lastLoginedAt DateTime? @db.DateTime(6)
  extra         Json?
  createdAt     DateTime  @default(now()) @db.DateTime(6)
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? @db.DateTime(6)
}

model Cocktail {
  id          Int          @id @default(autoincrement())
  name        String
  nameEnglish String
  desc        String?
  thumbnail   String?
  icon        String?
  glass       Glass?       @relation(fields: [glassId], references: [id])
  glassId     Int?
  techniques  Technique[]
  garnishes   Garnish[]
  recipes     Recipe[]
  ingredients Ingredient[]
}

model Glass {
  id          Int        @id @default(autoincrement())
  name        String
  nameEnglish String
  desc        String?
  imageUrl    String?
  volume      String
  cocktails   Cocktail[]
}

model Technique {
  id        Int        @id @default(autoincrement())
  name      String
  cocktails Cocktail[]
}

model Garnish {
  id        Int        @id @default(autoincrement())
  name      String
  desc      String?
  cocktails Cocktail[]
}

model Ingredient {
  id        Int        @id @default(autoincrement())
  name      String
  cocktails Cocktail[]
}

model Recipe {
  id         Int      @id @default(autoincrement())
  cocktail   Cocktail @relation(fields: [cocktailId], references: [id])
  cocktailId Int
  content    String   @db.Text()
}
